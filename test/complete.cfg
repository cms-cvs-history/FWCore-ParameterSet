#------------------------------------------------------------
#
# This is an annotated example of a configuration file.
# It is intended to illustrate the mapping between the configuration
# language and the Python representation of the configuration
# description that is used by the Data Management tools.
#
# $Id: complete.cfg,v 1.20 2007/01/30 21:56:34 rpw Exp $
#
#------------------------------------------------------------


# The configuration grammar accepts documents which have the general
# form of a nested collection of 'blocks' of various kinds. These
# blocks are delimted by braces: '{' and '}'.

# Newlines are meaningless in the configuration langauge.

# Comments (obviously!) are introduced by a sharp ('#'), and continue
# to the end of line.

# C++-style comments (beginning with a doubled forward slash: '//')
# are also accepted.

# Each configuration must have exactly one process block.

# Eventually, the software may restrict the process name to being one
# of a recognized set (such as HLT, PROD, TEST, USER). This is not yet
# implemented.

process PROCESSNAME =
{

  /*
   Each process block must have exactly one un-named source
   declaration. Before the opening of the block, one must specify the
   name of the class to be instantiated. This name is the same name
   that the (SEAL) plug-in was associated with, generally done in the
   class's implementation file. This is usually the name of the
   class, stripped of any namespace specification.
  */

  source = PoolSource
  {
    untracked vstring fileNames     = {"file:no_real_file_here"}
    untracked bool   debugFlag     = false
    untracked int32  maxEvents     = -1
    untracked uint32 debugVebosity = 10
  }

  module a = AProducer
  {
    int32 a = 32
    uint32 h1 = 0xCFDFEFFF
    vdouble b = { 1.1, 2.2 }
    vstring c = { }            # empty vectors are accepted
    vstring d = { 'boo', "yah" }
    string nothing = ""
    string moreNothing = ''
    string absolutelyNothing = '\0'
    string justATick = '\''
  }

  module b = BProducer
  {
    untracked int32 a = 14
    string b = "sillyness ensues"
    PSet c =
    {
      string a = 'nested'
      string b = "more"
    }
    VPSet d = { { int32 i = 10101
                  bool b = false }, { } }
    VPSet e = { }        # empty vector of PSet currently not allowed

    VPSet f = { { VPSet inner = { } }, { } }

    InputTag tag = y:z
    VInputTag tags = {a:b, c, d:e}

  }

  module c = CProducer {}

  module y = PoolOutputModule
  {
    untracked string fileName = "file:myfile_y.root"
    untracked int32 maxEvents = 2112
  }


  module z = PoolOutputModule
  {
    untracked string fileName = "file:myfile_z.root"
    untracked int32 maxEvents = 91624
  }

  module vp = VPProducer {
    PSet c = {
      VPSet d = {
        {
          int32 a = 32
          PSet d = {
            VPSet e = {}
          }
        },
        {
          int32 b = 12
        }
      }
    }
  }

  sequence s1 = { a&b }
  sequence s2 = { b }
  sequence s3 = { c }
  # It is not an error for two sequences (here, s3 and s4) to be identical.
  sequence s4 = { vp }

  path p1 = { (a&b), c }
  path p2 = { -s1, s4 }
  
  endpath ep1 = { y,  z }

  es_source ess1 = ESSType1
  {
    int32 b = 2
  }

  es_source = ESSType1
  {
    int32 b = 0
  }

  es_source =  ESSType2 
  {
    double x = 1.5
  }

  es_module esm1 = ESMType1 
  { 
    string s = "hi"
  }

  es_module = ESMType2 
  {
    int32 a = 3
  }

  service =  ServiceType1 
  {
    double b = 2
  }

  service =  ServiceType2 
  {
    double x = 1.5
  }

  looper = ALooper
  {
    uint32 nLoops = 10
  }
}

